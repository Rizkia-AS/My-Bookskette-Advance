// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: book.sql

package db

import (
	"context"
)

const deleteBook = `-- name: DeleteBook :one
delete from books 
where id = $1 
RETURNING id, title, author, is_read, year, created_at
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, deleteBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.IsRead,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
select id, title, author, is_read, year, created_at from books 
where id=$1 limit 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.IsRead,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}

const insertBook = `-- name: InsertBook :one
insert into books 
(title,author,is_read,year) 
values($1,$2, $3, $4) 
RETURNING id, title, author, is_read, year, created_at
`

type InsertBookParams struct {
	Title  string `json:"title"`
	Author string `json:"author"`
	IsRead bool   `json:"is_read"`
	Year   int64  `json:"year"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, insertBook,
		arg.Title,
		arg.Author,
		arg.IsRead,
		arg.Year,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.IsRead,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}

const listBook = `-- name: ListBook :many
select id, title, author, is_read, year, created_at from books 
order by id
`

func (q *Queries) ListBook(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBook)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.IsRead,
			&i.Year,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleBookStatus = `-- name: ToggleBookStatus :one
update books 
set is_read = not is_read
where id=$1 
RETURNING id, title, author, is_read, year, created_at
`

func (q *Queries) ToggleBookStatus(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, toggleBookStatus, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.IsRead,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
update books 
set title=$2, author=$3, is_read=$4, year=$5 
where id=$1 
RETURNING id, title, author, is_read, year, created_at
`

type UpdateBookParams struct {
	ID     int64  `json:"id"`
	Title  string `json:"title"`
	Author string `json:"author"`
	IsRead bool   `json:"is_read"`
	Year   int64  `json:"year"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.IsRead,
		arg.Year,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.IsRead,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}
